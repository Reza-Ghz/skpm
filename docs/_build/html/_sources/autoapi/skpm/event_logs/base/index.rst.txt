:py:mod:`skpm.event_logs.base`
==============================

.. py:module:: skpm.event_logs.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   skpm.event_logs.base.BasePreprocessing
   skpm.event_logs.base.TUEventLog
   skpm.event_logs.base.TUOCEL




.. py:class:: BasePreprocessing


   .. py:method:: preprocess()



.. py:class:: TUEventLog(root_folder: str = './data', save_as_pandas: bool = True, train_set: bool = True, file_path: str = None)


   Bases: :py:obj:`BasePreprocessing`

   Base class for event logs from the 4TU repository.

   It provides the basic structure for downloading, preprocessing, and splitting
   Furthermore, it provides the basic structure for caching the logs.

   Event logs from the 4tu repository are downloaded as .xes.gz files
   and then converted to parquet files. The parquet files are then used to
   load the event logs.
   By default, we keep the .xes files in the raw folder

   :param root_path: Path where the event log will be stored.
                     Defaults to "./data".
   :type root_path: str, optional
   :param config: Configuration of the event log.
                  Defaults to "default" (it just renames a few columns in the current version).
   :type config: Union[str, dict], optional
   :param transforms: Transformations to be applied to the event log.
                      Defaults to None. To be implemented.
   :type transforms: Any, optional
   :param kwargs: Additional arguments to be passed to the base class.

   .. py:property:: file_path
      :type: str


   .. py:attribute:: url
      :type: str

      

   .. py:attribute:: md5
      :type: str

      

   .. py:attribute:: file_name
      :type: str

      

   .. py:attribute:: meta_data
      :type: str

      

   .. py:method:: __len__()


   .. py:method:: download() -> None

      Generic method to download the event log from the 4TU Repository.

      It downloads the event log from the url, uncompresses
      it, and stores it. It can be overwritten by the
      subclasses if needed.


   .. py:method:: read_log() -> pandas.DataFrame


   .. py:method:: __repr__() -> str

      Return repr(self).



.. py:class:: TUOCEL



