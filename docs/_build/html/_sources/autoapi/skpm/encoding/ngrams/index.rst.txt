:py:mod:`skpm.encoding.ngrams`
==============================

.. py:module:: skpm.encoding.ngrams


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   skpm.encoding.ngrams.EncodedNgrams



Functions
~~~~~~~~~

.. autoapisummary::

   skpm.encoding.ngrams._trace_to_ngram
   skpm.encoding.ngrams.traces_to_ngrams



Attributes
~~~~~~~~~~

.. autoapisummary::

   skpm.encoding.ngrams.dummy_log
   skpm.encoding.ngrams.ng


.. py:function:: _trace_to_ngram(trace: Union[list, numpy.array], N: int = 3) -> list


.. py:function:: traces_to_ngrams(traces: list[Union[list, numpy.array]], N: int = 3) -> tuple[list, set]

   Returns a list of n-grams and a set of unique n-grams.

   :param traces:
   :type traces: list[list[object]]
   :param N:
   :type N: int, optional. N-gram size. Default: 3

   :returns: * **traces_as_ngrams** (*list of list of n-grams*) -- A list of traces, where each trace is a list of n-grams.
             * **unique_grams** (*set of n-grams*) -- A set of unique n-grams.


.. py:class:: EncodedNgrams(N: int = 3)


   Bases: :py:obj:`sklearn.base.TransformerMixin`, :py:obj:`sklearn.base.BaseEstimator`

   Mixin class for all transformers in scikit-learn.

   If :term:`get_feature_names_out` is defined, then :class:`BaseEstimator` will
   automatically wrap `transform` and `fit_transform` to follow the `set_output`
   API. See the :ref:`developer_api_set_output` for details.

   :class:`OneToOneFeatureMixin` and
   :class:`ClassNamePrefixFeaturesOutMixin` are helpful mixins for
   defining :term:`get_feature_names_out`.

   .. py:method:: get_feature_names_out()


   .. py:method:: fit(X, y=None)


   .. py:method:: transform(X, y=None)


   .. py:method:: _check_is_fitted()



.. py:data:: dummy_log

   

.. py:data:: ng

   

